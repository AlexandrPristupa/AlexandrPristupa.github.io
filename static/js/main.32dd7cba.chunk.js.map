{"version":3,"sources":["config/firebase.js","config/config.js","components/Header.jsx","components/MessagesList.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["firebaseAppAuth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","providers","googleProvider","GoogleAuthProvider","Header","children","AppBar","position","Toolbar","MessagesList","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","List","className","length","map","id","name","picture","text","ListItem","button","key","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Typography","variant","gutterBottom","ref","Form","onSendMessage","onChange","value","noValidate","autoComplete","onSubmit","Grid","container","item","xs","TextField","fullWidth","label","margin","Button","color","endIcon","Icon","onClick","withFirebaseAuth","signInWithGoogle","signOut","user","useState","message","setMessage","setMessages","getMessagesFromFirebase","a","Promise","res","database","limitToLast","on","snapshot","forEach","child","val","push","handleSignOut","isAuth","event","preventDefault","providerData","displayName","photoURL","sendMessage","target","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32dd7cba.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nimport { config } from './config';\n\nconst app = firebase.initializeApp(config);\n\nexport const firebaseAppAuth = app.auth();\nexport const providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nexport const getMessages = () => {\n    return new Promise((res) => {\n      const messagesDataBase = firebase\n        .database()\n        .ref(\"messages/\")\n        .limitToLast(500)\n\n      messagesDataBase.on(\"value\", snapshot => {\n        const messages = [];\n\n        snapshot.forEach(child => {\n          const message = child.val();\n\n          messages.push({\n            id: child.key,\n            text: message.text,\n            name: message.name,\n            picture: message.picture \n          });\n        });\n\n      res(messages)\n    })\n  })\n};\n\nexport const sendMessage = message => {\n  firebase\n    .database()\n    .ref(\"messages/\")\n    .push(message)\n};","export const config = {\n  apiKey: \"AIzaSyDWRSZp4jG75VKMbBmJFKsUG-9QS5DnZRo\",\n  authDomain: \"react-chat-3c938.firebaseapp.com\",\n  databaseURL: \"https://react-chat-3c938.firebaseio.com\",\n  projectId: \"react-chat-3c938\",\n  storageBucket: \"react-chat-3c938.appspot.com\",\n  messagingSenderId: \"535946449253\",\n  appId: \"1:535946449253:web:54a78d4703dddf2545518c\"\n};","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nconst Header = ({ children }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      {children}\n    </Toolbar>\n  </AppBar>\n)\n\nexport default Header;","import React, { useRef, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\n\nconst MessagesList = ({ messages }) => {\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  return (\n    <List className=\"Message-list\">\n            {messages && messages.length ? (\n              messages.map(({ id, name, picture, text }) => (\n                  <ListItem \n                    button \n                    key={id}\n                  >\n                    <ListItemAvatar>\n                      <Avatar\n                        alt=\"Profile Picture\"\n                        src={picture}\n                      />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={name}\n                      secondary={text}\n                    />\n                  </ListItem>\n              ))\n            ) : (\n              <Typography variant=\"h5\" gutterBottom>\n                No messages\n              </Typography>\n            )}\n            <div ref={messagesEndRef} />\n    </List>\n  )\n}\n\nexport default MessagesList;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\n\nconst Form = ({\n  onSendMessage,\n  onChange,\n  value\n}) => (\n  <form\n    noValidate\n    autoComplete=\"off\"\n    onSubmit={onSendMessage}\n    className=\"Message-form\"\n  >\n    <Grid container>\n      <Grid container item xs={10}>\n        <TextField\n          fullWidth\n          label=\"Message\"\n          margin=\"normal\"\n          value={value}\n          onChange={onChange}\n        />\n      </Grid>\n      <Grid container item xs={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          endIcon={<Icon>send</Icon>}\n          onClick={onSendMessage}\n        >\n          Send\n        </Button>\n      </Grid>\n    </Grid>\n  </form>\n)\n\nexport default Form;\n","import React, { useState, useEffect } from 'react';\nimport withFirebaseAuth from 'react-with-firebase-auth';\nimport { \n  firebaseAppAuth,\n  providers,\n  getMessages,\n  sendMessage\n} from './config/firebase';\n\nimport Header from './components/Header';\nimport MessagesList from './components/MessagesList';\nimport Form from './components/Form';\n\nimport Button from '@material-ui/core/Button';\n\nimport './App.scss';\n\nconst App = ({ signInWithGoogle, signOut, user }) => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const getMessagesFromFirebase = async () => {\n    const messages = await getMessages();\n\n    setMessages(messages);\n  };\n\n  useEffect(() => {\n    getMessagesFromFirebase();\n  }, []);\n\n  const handleSignIn = () => signInWithGoogle();\n\n  const handleSignOut  = async () => signOut();\n\n  const handleSendMessage = event => {\n     event.preventDefault();\n\n     if (!message) {\n        return;\n     }\n\n     const { displayName, photoURL } = user.providerData[0];\n\n     sendMessage({\n       text: message,\n       name: displayName,\n       picture: photoURL\n     });\n\n     getMessagesFromFirebase();\n\n     setMessage('');\n  };\n\n  const handleOnChenge = event => setMessage(event.target.value);\n\n  const isAuth = !!user;\n  \n  return (\n    <div className=\"App\">\n      <Header>\n        {!isAuth && (\n          <Button \n            color=\"inherit\"\n            onClick={handleSignIn}\n          >\n            Sign in\n          </Button>\n        )}\n\n        {isAuth && (\n          <Button \n            color=\"inherit\"\n            onClick={handleSignOut}\n          >\n            Sign out\n          </Button>          \n        )}\n      </Header>\n\n      {isAuth && (\n        <>\n          <MessagesList \n            messages={messages}   \n          />\n\n          <Form\n            onSendMessage={handleSendMessage}\n            onChange={handleOnChenge}\n            value={message}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <App />\n  </>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}