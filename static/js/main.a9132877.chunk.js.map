{"version":3,"sources":["config/firebase.js","config/config.js","components/Header.jsx","components/MessagesList.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["firebaseAppAuth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","providers","googleProvider","GoogleAuthProvider","Header","children","AppBar","position","Toolbar","MessagesList","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","List","className","length","map","id","name","picture","text","ListItem","button","key","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Typography","variant","gutterBottom","ref","Form","onSendMessage","onChange","value","noValidate","autoComplete","onSubmit","Grid","container","xs","TextField","fullWidth","label","margin","Button","color","endIcon","Icon","onClick","withFirebaseAuth","signInWithGoogle","signOut","user","useState","message","setMessage","setMessages","getMessagesFromFirebase","a","Promise","res","database","limitToLast","on","snapshot","forEach","child","val","push","handleSignOut","isAuth","event","preventDefault","providerData","displayName","photoURL","sendMessage","target","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9132877.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nimport { config } from './config';\r\n\r\nconst app = firebase.initializeApp(config);\r\n\r\nexport const firebaseAppAuth = app.auth();\r\nexport const providers = {\r\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\r\n};\r\n\r\nexport const getMessages = () => {\r\n    return new Promise((res) => {\r\n      const messagesDataBase = firebase\r\n        .database()\r\n        .ref(\"messages/\")\r\n        .limitToLast(500)\r\n\r\n      messagesDataBase.on(\"value\", snapshot => {\r\n        const messages = [];\r\n\r\n        snapshot.forEach(child => {\r\n          const message = child.val();\r\n\r\n          messages.push({\r\n            id: child.key,\r\n            text: message.text,\r\n            name: message.name,\r\n            picture: message.picture \r\n          });\r\n        });\r\n\r\n      res(messages);\r\n    });\r\n  });\r\n};\r\n\r\nexport const sendMessage = message => {\r\n  firebase\r\n    .database()\r\n    .ref(\"messages/\")\r\n    .push(message);\r\n};","export const config = {\r\n  apiKey: \"AIzaSyDWRSZp4jG75VKMbBmJFKsUG-9QS5DnZRo\",\r\n  authDomain: \"react-chat-3c938.firebaseapp.com\",\r\n  databaseURL: \"https://react-chat-3c938.firebaseio.com\",\r\n  projectId: \"react-chat-3c938\",\r\n  storageBucket: \"react-chat-3c938.appspot.com\",\r\n  messagingSenderId: \"535946449253\",\r\n  appId: \"1:535946449253:web:54a78d4703dddf2545518c\"\r\n};","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nconst Header = ({ children }) => (\r\n  <AppBar position=\"static\">\r\n    <Toolbar>\r\n      {children}\r\n    </Toolbar>\r\n  </AppBar>\r\n)\r\n\r\nexport default Header;","import React, { useRef, useEffect } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst MessagesList = ({ messages }) => {\r\n  const messagesEndRef = useRef(null);\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  return (\r\n    <List className=\"Message-list\">\r\n            {messages && messages.length ? (\r\n              messages.map(({ id, name, picture, text }) => (\r\n                  <ListItem \r\n                    button \r\n                    key={id}\r\n                  >\r\n                    <ListItemAvatar>\r\n                      <Avatar\r\n                        alt=\"Profile Picture\"\r\n                        src={picture}\r\n                      />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={name}\r\n                      secondary={text}\r\n                    />\r\n                  </ListItem>\r\n              ))\r\n            ) : (\r\n              <Typography variant=\"h5\" gutterBottom>\r\n                No messages\r\n              </Typography>\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default MessagesList;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nconst Form = ({\r\n  onSendMessage,\r\n  onChange,\r\n  value\r\n}) => (\r\n  <form\r\n    noValidate\r\n    autoComplete=\"off\"\r\n    onSubmit={onSendMessage}\r\n    className=\"Message-form\"\r\n  >\r\n    <Grid container>\r\n      <Grid container xs={10}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Message\"\r\n          margin=\"normal\"\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      </Grid>\r\n      <Grid container xs={2}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          endIcon={<Icon>send</Icon>}\r\n          onClick={onSendMessage}\r\n        >\r\n          Send\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  </form>\r\n)\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from 'react';\r\nimport withFirebaseAuth from 'react-with-firebase-auth';\r\nimport { \r\n  firebaseAppAuth,\r\n  providers,\r\n  getMessages,\r\n  sendMessage\r\n} from './config/firebase';\r\n\r\nimport Header from './components/Header';\r\nimport MessagesList from './components/MessagesList';\r\nimport Form from './components/Form';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport './App.scss';\r\n\r\nconst App = ({ signInWithGoogle, signOut, user }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const getMessagesFromFirebase = async () => {\r\n    const messages = await getMessages();\r\n\r\n    setMessages(messages);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMessagesFromFirebase();\r\n  }, []);\r\n\r\n  const handleSignIn = () => signInWithGoogle();\r\n\r\n  const handleSignOut  = async () => signOut();\r\n\r\n  const handleSendMessage = event => {\r\n     event.preventDefault();\r\n\r\n     if (!message) {\r\n        return;\r\n     }\r\n\r\n     const { displayName, photoURL } = user.providerData[0];\r\n\r\n     sendMessage({\r\n       text: message,\r\n       name: displayName,\r\n       picture: photoURL\r\n     });\r\n\r\n     getMessagesFromFirebase();\r\n\r\n     setMessage('');\r\n  };\r\n\r\n  const handleOnChenge = event => setMessage(event.target.value);\r\n\r\n  const isAuth = !!user;\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Header>\r\n        {!isAuth && (\r\n          <Button \r\n            color=\"inherit\"\r\n            onClick={handleSignIn}\r\n          >\r\n            Sign in\r\n          </Button>\r\n        )}\r\n\r\n        {isAuth && (\r\n          <Button \r\n            color=\"inherit\"\r\n            onClick={handleSignOut}\r\n          >\r\n            Sign out\r\n          </Button>          \r\n        )}\r\n      </Header>\r\n\r\n      {isAuth && (\r\n        <>\r\n          <MessagesList \r\n            messages={messages}   \r\n          />\r\n\r\n          <Form\r\n            onSendMessage={handleSendMessage}\r\n            onChange={handleOnChenge}\r\n            value={message}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withFirebaseAuth({\r\n  providers,\r\n  firebaseAppAuth,\r\n})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <CssBaseline />\r\n    <App />\r\n  </>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}